//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

public class SS : IDisposable
{
    protected bool swigCMemOwn;
    private HandleRef swigCPtr;

    internal SS(IntPtr cPtr, bool cMemoryOwn)
    {
        swigCMemOwn = cMemoryOwn;
        swigCPtr = new HandleRef(this, cPtr);
    }

    public SS() : this(CoolPropPINVOKE.new_SS(), true)
    {
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    }

    public double rhomolar
    {
        set
        {
            CoolPropPINVOKE.SS_rhomolar_set(swigCPtr, value);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var ret = CoolPropPINVOKE.SS_rhomolar_get(swigCPtr);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public double T
    {
        set
        {
            CoolPropPINVOKE.SS_T_set(swigCPtr, value);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var ret = CoolPropPINVOKE.SS_T_get(swigCPtr);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public double p
    {
        set
        {
            CoolPropPINVOKE.SS_p_set(swigCPtr, value);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var ret = CoolPropPINVOKE.SS_p_get(swigCPtr);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public double hmolar
    {
        set
        {
            CoolPropPINVOKE.SS_hmolar_set(swigCPtr, value);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var ret = CoolPropPINVOKE.SS_hmolar_get(swigCPtr);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public double smolar
    {
        set
        {
            CoolPropPINVOKE.SS_smolar_set(swigCPtr, value);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var ret = CoolPropPINVOKE.SS_smolar_get(swigCPtr);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public double umolar
    {
        set
        {
            CoolPropPINVOKE.SS_umolar_set(swigCPtr, value);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var ret = CoolPropPINVOKE.SS_umolar_get(swigCPtr);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public double Q
    {
        set
        {
            CoolPropPINVOKE.SS_Q_set(swigCPtr, value);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var ret = CoolPropPINVOKE.SS_Q_get(swigCPtr);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public virtual void Dispose()
    {
        lock (this)
        {
            if (swigCPtr.Handle != IntPtr.Zero)
            {
                if (swigCMemOwn)
                {
                    swigCMemOwn = false;
                    CoolPropPINVOKE.delete_SS(swigCPtr);
                }
                swigCPtr = new HandleRef(null, IntPtr.Zero);
            }
            GC.SuppressFinalize(this);
        }
    }

    internal static HandleRef getCPtr(SS obj)
    {
        return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
    }

    ~SS()
    {
        Dispose();
    }

    public bool is_valid()
    {
        var ret = CoolPropPINVOKE.SS_is_valid(swigCPtr);
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        return ret;
    }
}