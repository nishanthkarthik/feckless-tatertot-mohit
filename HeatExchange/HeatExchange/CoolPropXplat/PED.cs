//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

public class PED : IDisposable
{
    protected bool swigCMemOwn;
    private HandleRef swigCPtr;

    internal PED(IntPtr cPtr, bool cMemoryOwn)
    {
        swigCMemOwn = cMemoryOwn;
        swigCPtr = new HandleRef(this, cPtr);
    }

    public PED() : this(CoolPropPINVOKE.new_PED(), true)
    {
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    }

    public bool TypeI
    {
        set
        {
            CoolPropPINVOKE.PED_TypeI_set(swigCPtr, value);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var ret = CoolPropPINVOKE.PED_TypeI_get(swigCPtr);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public bool built
    {
        set
        {
            CoolPropPINVOKE.PED_built_set(swigCPtr, value);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var ret = CoolPropPINVOKE.PED_built_get(swigCPtr);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public uint iTsat_max
    {
        set
        {
            CoolPropPINVOKE.PED_iTsat_max_set(swigCPtr, value);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var ret = CoolPropPINVOKE.PED_iTsat_max_get(swigCPtr);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public uint ipsat_max
    {
        set
        {
            CoolPropPINVOKE.PED_ipsat_max_set(swigCPtr, value);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var ret = CoolPropPINVOKE.PED_ipsat_max_get(swigCPtr);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public uint icrit
    {
        set
        {
            CoolPropPINVOKE.PED_icrit_set(swigCPtr, value);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var ret = CoolPropPINVOKE.PED_icrit_get(swigCPtr);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public DoubleVector T
    {
        set
        {
            CoolPropPINVOKE.PED_T_set(swigCPtr, DoubleVector.getCPtr(value));
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var cPtr = CoolPropPINVOKE.PED_T_get(swigCPtr);
            var ret = (cPtr == IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public DoubleVector p
    {
        set
        {
            CoolPropPINVOKE.PED_p_set(swigCPtr, DoubleVector.getCPtr(value));
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var cPtr = CoolPropPINVOKE.PED_p_get(swigCPtr);
            var ret = (cPtr == IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public DoubleVector lnT
    {
        set
        {
            CoolPropPINVOKE.PED_lnT_set(swigCPtr, DoubleVector.getCPtr(value));
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var cPtr = CoolPropPINVOKE.PED_lnT_get(swigCPtr);
            var ret = (cPtr == IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public DoubleVector lnp
    {
        set
        {
            CoolPropPINVOKE.PED_lnp_set(swigCPtr, DoubleVector.getCPtr(value));
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var cPtr = CoolPropPINVOKE.PED_lnp_get(swigCPtr);
            var ret = (cPtr == IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public DoubleVector rhomolar_liq
    {
        set
        {
            CoolPropPINVOKE.PED_rhomolar_liq_set(swigCPtr, DoubleVector.getCPtr(value));
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var cPtr = CoolPropPINVOKE.PED_rhomolar_liq_get(swigCPtr);
            var ret = (cPtr == IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public DoubleVector rhomolar_vap
    {
        set
        {
            CoolPropPINVOKE.PED_rhomolar_vap_set(swigCPtr, DoubleVector.getCPtr(value));
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var cPtr = CoolPropPINVOKE.PED_rhomolar_vap_get(swigCPtr);
            var ret = (cPtr == IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public DoubleVector lnrhomolar_liq
    {
        set
        {
            CoolPropPINVOKE.PED_lnrhomolar_liq_set(swigCPtr, DoubleVector.getCPtr(value));
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var cPtr = CoolPropPINVOKE.PED_lnrhomolar_liq_get(swigCPtr);
            var ret = (cPtr == IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public DoubleVector lnrhomolar_vap
    {
        set
        {
            CoolPropPINVOKE.PED_lnrhomolar_vap_set(swigCPtr, DoubleVector.getCPtr(value));
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var cPtr = CoolPropPINVOKE.PED_lnrhomolar_vap_get(swigCPtr);
            var ret = (cPtr == IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public DoubleVector hmolar_liq
    {
        set
        {
            CoolPropPINVOKE.PED_hmolar_liq_set(swigCPtr, DoubleVector.getCPtr(value));
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var cPtr = CoolPropPINVOKE.PED_hmolar_liq_get(swigCPtr);
            var ret = (cPtr == IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public DoubleVector hmolar_vap
    {
        set
        {
            CoolPropPINVOKE.PED_hmolar_vap_set(swigCPtr, DoubleVector.getCPtr(value));
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var cPtr = CoolPropPINVOKE.PED_hmolar_vap_get(swigCPtr);
            var ret = (cPtr == IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public DoubleVector smolar_liq
    {
        set
        {
            CoolPropPINVOKE.PED_smolar_liq_set(swigCPtr, DoubleVector.getCPtr(value));
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var cPtr = CoolPropPINVOKE.PED_smolar_liq_get(swigCPtr);
            var ret = (cPtr == IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public DoubleVector smolar_vap
    {
        set
        {
            CoolPropPINVOKE.PED_smolar_vap_set(swigCPtr, DoubleVector.getCPtr(value));
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var cPtr = CoolPropPINVOKE.PED_smolar_vap_get(swigCPtr);
            var ret = (cPtr == IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public DoubleVector Q
    {
        set
        {
            CoolPropPINVOKE.PED_Q_set(swigCPtr, DoubleVector.getCPtr(value));
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var cPtr = CoolPropPINVOKE.PED_Q_get(swigCPtr);
            var ret = (cPtr == IntPtr.Zero) ? null : new DoubleVector(cPtr, false);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t K
    {
        set
        {
            CoolPropPINVOKE.PED_K_set(swigCPtr, SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t.getCPtr(value));
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var cPtr = CoolPropPINVOKE.PED_K_get(swigCPtr);
            var ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t(cPtr, false);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t lnK
    {
        set
        {
            CoolPropPINVOKE.PED_lnK_set(swigCPtr, SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t.getCPtr(value));
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var cPtr = CoolPropPINVOKE.PED_lnK_get(swigCPtr);
            var ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t(cPtr, false);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t x
    {
        set
        {
            CoolPropPINVOKE.PED_x_set(swigCPtr, SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t.getCPtr(value));
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var cPtr = CoolPropPINVOKE.PED_x_get(swigCPtr);
            var ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t(cPtr, false);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t y
    {
        set
        {
            CoolPropPINVOKE.PED_y_set(swigCPtr, SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t.getCPtr(value));
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var cPtr = CoolPropPINVOKE.PED_y_get(swigCPtr);
            var ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t(cPtr, false);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public SWIGTYPE_p_std__mapT_std__string_std__vectorT_double_t_t vectors
    {
        set
        {
            CoolPropPINVOKE.PED_vectors_set(swigCPtr,
                SWIGTYPE_p_std__mapT_std__string_std__vectorT_double_t_t.getCPtr(value));
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var cPtr = CoolPropPINVOKE.PED_vectors_get(swigCPtr);
            var ret = (cPtr == IntPtr.Zero)
                ? null
                : new SWIGTYPE_p_std__mapT_std__string_std__vectorT_double_t_t(cPtr, false);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public SWIGTYPE_p_std__mapT_std__string_std__vectorT_std__vectorT_double_t_t_t matrices
    {
        set
        {
            CoolPropPINVOKE.PED_matrices_set(swigCPtr,
                SWIGTYPE_p_std__mapT_std__string_std__vectorT_std__vectorT_double_t_t_t.getCPtr(value));
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var cPtr = CoolPropPINVOKE.PED_matrices_get(swigCPtr);
            var ret = (cPtr == IntPtr.Zero)
                ? null
                : new SWIGTYPE_p_std__mapT_std__string_std__vectorT_std__vectorT_double_t_t_t(cPtr, false);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public virtual void Dispose()
    {
        lock (this)
        {
            if (swigCPtr.Handle != IntPtr.Zero)
            {
                if (swigCMemOwn)
                {
                    swigCMemOwn = false;
                    CoolPropPINVOKE.delete_PED(swigCPtr);
                }
                swigCPtr = new HandleRef(null, IntPtr.Zero);
            }
            GC.SuppressFinalize(this);
        }
    }

    internal static HandleRef getCPtr(PED obj)
    {
        return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
    }

    ~PED()
    {
        Dispose();
    }

    public void resize(uint N)
    {
        CoolPropPINVOKE.PED_resize(swigCPtr, N);
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    }

    public void clear()
    {
        CoolPropPINVOKE.PED_clear(swigCPtr);
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    }

    public void pack()
    {
        CoolPropPINVOKE.PED_pack(swigCPtr);
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    }

    public SWIGTYPE_p_std__mapT_std__string_std__vectorT_double_t_t__iterator get_vector_iterator(string name)
    {
        var ret =
            new SWIGTYPE_p_std__mapT_std__string_std__vectorT_double_t_t__iterator(
                CoolPropPINVOKE.PED_get_vector_iterator(swigCPtr, name), true);
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        return ret;
    }

    public SWIGTYPE_p_std__mapT_std__string_std__vectorT_std__vectorT_double_t_t_t__iterator get_matrix_iterator(
        string name)
    {
        var ret =
            new SWIGTYPE_p_std__mapT_std__string_std__vectorT_std__vectorT_double_t_t_t__iterator(
                CoolPropPINVOKE.PED_get_matrix_iterator(swigCPtr, name), true);
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        return ret;
    }

    public void unpack()
    {
        CoolPropPINVOKE.PED_unpack(swigCPtr);
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    }

    public void deserialize(SWIGTYPE_p_msgpack__object deserialized)
    {
        CoolPropPINVOKE.PED_deserialize(swigCPtr, SWIGTYPE_p_msgpack__object.getCPtr(deserialized));
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    }

    public void insert_variables(double T, double p, double rhomolar_liq, double rhomolar_vap, double hmolar_liq,
        double hmolar_vap, double smolar_liq, double smolar_vap, SWIGTYPE_p_std__vectorT_CoolPropDbl_t x,
        SWIGTYPE_p_std__vectorT_CoolPropDbl_t y, uint i)
    {
        CoolPropPINVOKE.PED_insert_variables(swigCPtr, T, p, rhomolar_liq, rhomolar_vap, hmolar_liq, hmolar_vap,
            smolar_liq, smolar_vap, SWIGTYPE_p_std__vectorT_CoolPropDbl_t.getCPtr(x),
            SWIGTYPE_p_std__vectorT_CoolPropDbl_t.getCPtr(y), i);
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    }

    public void store_variables(double T, double p, double rhomolar_liq, double rhomolar_vap, double hmolar_liq,
        double hmolar_vap, double smolar_liq, double smolar_vap, SWIGTYPE_p_std__vectorT_CoolPropDbl_t x,
        SWIGTYPE_p_std__vectorT_CoolPropDbl_t y)
    {
        CoolPropPINVOKE.PED_store_variables(swigCPtr, T, p, rhomolar_liq, rhomolar_vap, hmolar_liq, hmolar_vap,
            smolar_liq, smolar_vap, SWIGTYPE_p_std__vectorT_CoolPropDbl_t.getCPtr(x),
            SWIGTYPE_p_std__vectorT_CoolPropDbl_t.getCPtr(y));
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    }
}