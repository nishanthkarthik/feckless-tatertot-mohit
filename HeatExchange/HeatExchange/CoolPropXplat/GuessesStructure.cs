//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

public class GuessesStructure : IDisposable
{
    protected bool swigCMemOwn;
    private HandleRef swigCPtr;

    internal GuessesStructure(IntPtr cPtr, bool cMemoryOwn)
    {
        swigCMemOwn = cMemoryOwn;
        swigCPtr = new HandleRef(this, cPtr);
    }

    public GuessesStructure() : this(CoolPropPINVOKE.new_GuessesStructure(), true)
    {
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    }

    public double T
    {
        set
        {
            CoolPropPINVOKE.GuessesStructure_T_set(swigCPtr, value);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var ret = CoolPropPINVOKE.GuessesStructure_T_get(swigCPtr);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public double p
    {
        set
        {
            CoolPropPINVOKE.GuessesStructure_p_set(swigCPtr, value);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var ret = CoolPropPINVOKE.GuessesStructure_p_get(swigCPtr);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public double rhomolar
    {
        set
        {
            CoolPropPINVOKE.GuessesStructure_rhomolar_set(swigCPtr, value);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var ret = CoolPropPINVOKE.GuessesStructure_rhomolar_get(swigCPtr);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public double hmolar
    {
        set
        {
            CoolPropPINVOKE.GuessesStructure_hmolar_set(swigCPtr, value);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var ret = CoolPropPINVOKE.GuessesStructure_hmolar_get(swigCPtr);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public double smolar
    {
        set
        {
            CoolPropPINVOKE.GuessesStructure_smolar_set(swigCPtr, value);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var ret = CoolPropPINVOKE.GuessesStructure_smolar_get(swigCPtr);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public double rhomolar_liq
    {
        set
        {
            CoolPropPINVOKE.GuessesStructure_rhomolar_liq_set(swigCPtr, value);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var ret = CoolPropPINVOKE.GuessesStructure_rhomolar_liq_get(swigCPtr);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public double rhomolar_vap
    {
        set
        {
            CoolPropPINVOKE.GuessesStructure_rhomolar_vap_set(swigCPtr, value);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var ret = CoolPropPINVOKE.GuessesStructure_rhomolar_vap_get(swigCPtr);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public SWIGTYPE_p_std__vectorT_CoolPropDbl_t x
    {
        set
        {
            CoolPropPINVOKE.GuessesStructure_x_set(swigCPtr, SWIGTYPE_p_std__vectorT_CoolPropDbl_t.getCPtr(value));
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var cPtr = CoolPropPINVOKE.GuessesStructure_x_get(swigCPtr);
            var ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_CoolPropDbl_t(cPtr, false);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public SWIGTYPE_p_std__vectorT_CoolPropDbl_t y
    {
        set
        {
            CoolPropPINVOKE.GuessesStructure_y_set(swigCPtr, SWIGTYPE_p_std__vectorT_CoolPropDbl_t.getCPtr(value));
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        }
        get
        {
            var cPtr = CoolPropPINVOKE.GuessesStructure_y_get(swigCPtr);
            var ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_CoolPropDbl_t(cPtr, false);
            if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }

    public virtual void Dispose()
    {
        lock (this)
        {
            if (swigCPtr.Handle != IntPtr.Zero)
            {
                if (swigCMemOwn)
                {
                    swigCMemOwn = false;
                    CoolPropPINVOKE.delete_GuessesStructure(swigCPtr);
                }
                swigCPtr = new HandleRef(null, IntPtr.Zero);
            }
            GC.SuppressFinalize(this);
        }
    }

    internal static HandleRef getCPtr(GuessesStructure obj)
    {
        return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
    }

    ~GuessesStructure()
    {
        Dispose();
    }
}