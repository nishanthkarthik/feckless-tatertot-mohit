//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;

public class DoubleVector : IDisposable, IEnumerable
    , IList<double>
{
    protected bool swigCMemOwn;
    private HandleRef swigCPtr;

    internal DoubleVector(IntPtr cPtr, bool cMemoryOwn)
    {
        swigCMemOwn = cMemoryOwn;
        swigCPtr = new HandleRef(this, cPtr);
    }

    public DoubleVector(ICollection c) : this()
    {
        if (c == null)
            throw new ArgumentNullException("c");
        foreach (double element in c)
        {
            Add(element);
        }
    }

    public DoubleVector() : this(CoolPropPINVOKE.new_DoubleVector__SWIG_0(), true)
    {
    }

    public DoubleVector(DoubleVector other) : this(CoolPropPINVOKE.new_DoubleVector__SWIG_1(getCPtr(other)), true)
    {
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    }

    public DoubleVector(int capacity) : this(CoolPropPINVOKE.new_DoubleVector__SWIG_2(capacity), true)
    {
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    }

    public bool IsFixedSize
    {
        get { return false; }
    }

    public int Capacity
    {
        get { return (int) capacity(); }
        set
        {
            if (value < size())
                throw new ArgumentOutOfRangeException("Capacity");
            reserve((uint) value);
        }
    }

    public bool IsSynchronized
    {
        get { return false; }
    }

    public virtual void Dispose()
    {
        lock (this)
        {
            if (swigCPtr.Handle != IntPtr.Zero)
            {
                if (swigCMemOwn)
                {
                    swigCMemOwn = false;
                    CoolPropPINVOKE.delete_DoubleVector(swigCPtr);
                }
                swigCPtr = new HandleRef(null, IntPtr.Zero);
            }
            GC.SuppressFinalize(this);
        }
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return new DoubleVectorEnumerator(this);
    }

    public bool IsReadOnly
    {
        get { return false; }
    }

    public double this[int index]
    {
        get { return getitem(index); }
        set { setitem(index, value); }
    }

    public int Count
    {
        get { return (int) size(); }
    }

    public void CopyTo(double[] array, int arrayIndex)
    {
        CopyTo(0, array, arrayIndex, Count);
    }

    IEnumerator<double> IEnumerable<double>.GetEnumerator()
    {
        return new DoubleVectorEnumerator(this);
    }

    public void Clear()
    {
        CoolPropPINVOKE.DoubleVector_Clear(swigCPtr);
    }

    public void Add(double x)
    {
        CoolPropPINVOKE.DoubleVector_Add(swigCPtr, x);
    }

    public void Insert(int index, double x)
    {
        CoolPropPINVOKE.DoubleVector_Insert(swigCPtr, index, x);
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    }

    public void RemoveAt(int index)
    {
        CoolPropPINVOKE.DoubleVector_RemoveAt(swigCPtr, index);
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    }

    public bool Contains(double value)
    {
        var ret = CoolPropPINVOKE.DoubleVector_Contains(swigCPtr, value);
        return ret;
    }

    public int IndexOf(double value)
    {
        var ret = CoolPropPINVOKE.DoubleVector_IndexOf(swigCPtr, value);
        return ret;
    }

    public bool Remove(double value)
    {
        var ret = CoolPropPINVOKE.DoubleVector_Remove(swigCPtr, value);
        return ret;
    }

    internal static HandleRef getCPtr(DoubleVector obj)
    {
        return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
    }

    ~DoubleVector()
    {
        Dispose();
    }

    public void CopyTo(double[] array)
    {
        CopyTo(0, array, 0, Count);
    }

    public void CopyTo(int index, double[] array, int arrayIndex, int count)
    {
        if (array == null)
            throw new ArgumentNullException("array");
        if (index < 0)
            throw new ArgumentOutOfRangeException("index", "Value is less than zero");
        if (arrayIndex < 0)
            throw new ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
        if (count < 0)
            throw new ArgumentOutOfRangeException("count", "Value is less than zero");
        if (array.Rank > 1)
            throw new ArgumentException("Multi dimensional array.", "array");
        if (index + count > Count || arrayIndex + count > array.Length)
            throw new ArgumentException("Number of elements to copy is too large.");
        for (var i = 0; i < count; i++)
            array.SetValue(getitemcopy(index + i), arrayIndex + i);
    }

    public DoubleVectorEnumerator GetEnumerator()
    {
        return new DoubleVectorEnumerator(this);
    }

    private uint size()
    {
        var ret = CoolPropPINVOKE.DoubleVector_size(swigCPtr);
        return ret;
    }

    private uint capacity()
    {
        var ret = CoolPropPINVOKE.DoubleVector_capacity(swigCPtr);
        return ret;
    }

    private void reserve(uint n)
    {
        CoolPropPINVOKE.DoubleVector_reserve(swigCPtr, n);
    }

    private double getitemcopy(int index)
    {
        var ret = CoolPropPINVOKE.DoubleVector_getitemcopy(swigCPtr, index);
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        return ret;
    }

    private double getitem(int index)
    {
        var ret = CoolPropPINVOKE.DoubleVector_getitem(swigCPtr, index);
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        return ret;
    }

    private void setitem(int index, double val)
    {
        CoolPropPINVOKE.DoubleVector_setitem(swigCPtr, index, val);
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    }

    public void AddRange(DoubleVector values)
    {
        CoolPropPINVOKE.DoubleVector_AddRange(swigCPtr, getCPtr(values));
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    }

    public DoubleVector GetRange(int index, int count)
    {
        var cPtr = CoolPropPINVOKE.DoubleVector_GetRange(swigCPtr, index, count);
        var ret = (cPtr == IntPtr.Zero) ? null : new DoubleVector(cPtr, true);
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        return ret;
    }

    public void InsertRange(int index, DoubleVector values)
    {
        CoolPropPINVOKE.DoubleVector_InsertRange(swigCPtr, index, getCPtr(values));
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    }

    public void RemoveRange(int index, int count)
    {
        CoolPropPINVOKE.DoubleVector_RemoveRange(swigCPtr, index, count);
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    }

    public static DoubleVector Repeat(double value, int count)
    {
        var cPtr = CoolPropPINVOKE.DoubleVector_Repeat(value, count);
        var ret = (cPtr == IntPtr.Zero) ? null : new DoubleVector(cPtr, true);
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
        return ret;
    }

    public void Reverse()
    {
        CoolPropPINVOKE.DoubleVector_Reverse__SWIG_0(swigCPtr);
    }

    public void Reverse(int index, int count)
    {
        CoolPropPINVOKE.DoubleVector_Reverse__SWIG_1(swigCPtr, index, count);
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    }

    public void SetRange(int index, DoubleVector values)
    {
        CoolPropPINVOKE.DoubleVector_SetRange(swigCPtr, index, getCPtr(values));
        if (CoolPropPINVOKE.SWIGPendingException.Pending) throw CoolPropPINVOKE.SWIGPendingException.Retrieve();
    }

    public int LastIndexOf(double value)
    {
        var ret = CoolPropPINVOKE.DoubleVector_LastIndexOf(swigCPtr, value);
        return ret;
    }

    // Type-safe enumerator
    /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
    /// whenever the collection is modified. This has been done for changes in the size of the
    /// collection but not when one of the elements of the collection is modified as it is a bit
    /// tricky to detect unmanaged code that modifies the collection under our feet.
    public sealed class DoubleVectorEnumerator : IEnumerator
        , IEnumerator<double>
    {
        private readonly DoubleVector collectionRef;
        private readonly int currentSize;
        private int currentIndex;
        private object currentObject;

        public DoubleVectorEnumerator(DoubleVector collection)
        {
            collectionRef = collection;
            currentIndex = -1;
            currentObject = null;
            currentSize = collectionRef.Count;
        }

        // Type-unsafe IEnumerator.Current
        object IEnumerator.Current
        {
            get { return Current; }
        }

        public bool MoveNext()
        {
            var size = collectionRef.Count;
            var moveOkay = (currentIndex + 1 < size) && (size == currentSize);
            if (moveOkay)
            {
                currentIndex++;
                currentObject = collectionRef[currentIndex];
            }
            else
            {
                currentObject = null;
            }
            return moveOkay;
        }

        public void Reset()
        {
            currentIndex = -1;
            currentObject = null;
            if (collectionRef.Count != currentSize)
            {
                throw new InvalidOperationException("Collection modified.");
            }
        }

        // Type-safe iterator Current
        public double Current
        {
            get
            {
                if (currentIndex == -1)
                    throw new InvalidOperationException("Enumeration not started.");
                if (currentIndex > currentSize - 1)
                    throw new InvalidOperationException("Enumeration finished.");
                if (currentObject == null)
                    throw new InvalidOperationException("Collection modified.");
                return (double) currentObject;
            }
        }

        public void Dispose()
        {
            currentIndex = -1;
            currentObject = null;
        }
    }
}